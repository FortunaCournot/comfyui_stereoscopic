::====================================================================
:: VR we are - (C)2025 Fortuna Cournot, https://www.3d-gallery.org/
:: Windows Installer
:: 3 Step installation:
::   - Windows Installer (this file)
::       Parameters (non-interactive mode): InstallPathParentFolder
::   - Git Bash script (generated by this file)
::   - VRweare install script (executed over ComfyUI from Git Bash script).
::====================================================================
@ECHO OFF 
:: Windows version check 
IF NOT "%OS%"=="Windows_NT" GOTO Fail
:: Keep variable local 
SETLOCAL enabledelayedexpansion

SET VRWEARE_VERSION=4.0

SET INTERACTIVE=1
if [%1]==[] goto DoChecks
SET INSTALLATIONTYPE=1
SET InstallFolder=%1
echo Installfolder: %InstallFolder%
SET INTERACTIVE=0
SET VRWEAREPATH=

:DoChecks
IF %INTERACTIVE% equ 0 GOTO CheckOS
CLS
ECHO/
ECHO [1m=== [92mV[91mR[0m[1m we are %VRWEARE_VERSION% - Installation ===[0m
ECHO/
::pass

:: CheckOS
:CheckOS
FOR /f "tokens=4-5 delims=. " %%i IN ('ver') DO SET VERSION=%%i.%%j
IF "%version%" == "6.3" ECHO Windows 8.1 not supported.
IF "%version%" == "6.2" ECHO Windows 8 not supported.
IF "%version%" == "6.1" ECHO Windows 7 not supported.
IF "%version%" == "6.0" ECHO Windows Vista not supported.
IF "%version%" == "10.0" GOTO CheckArch
ECHO OS version %version%
GOTO Fail

:CheckArch
reg Query "HKLM\Hardware\Description\System\CentralProcessor\0" | find /i "x86" > NUL && set OS=32BIT || set OS=64BIT
if %OS%==32BIT echo [91mThis is a 32bit operating system. Not supported.[0m
if %OS%==64BIT GOTO CheckGitRegistryEntry
echo OS Architecture %OS%
GOTO Fail


:: Check for existing software in registry ...
:CheckGitRegistryEntry
:: Read the Git for Windows installation path from the Registry.
::echo Checking for existing Git installation...
for %%k in (HKCU HKLM) do (
    for %%w in (\ \Wow6432Node\) do (
        for /f "skip=2 delims=: tokens=1*" %%a in ('reg query "%%k\SOFTWARE%%wMicrosoft\Windows\CurrentVersion\Uninstall\Git_is1" /v InstallLocation 2^> nul') do (
            for /f "tokens=3" %%z in ("%%a") do (
                set GITPATH=%%z:%%b
                ::echo Found Git reg entry at "!GITPATH!".
                goto GIT_END_GIT_REG_SEARCH
            )
        )
    )
)
ECHO [91mGit not found. Please install from [96m https://git-scm.com/ [0m
GOTO Fail
:GIT_END_GIT_REG_SEARCH

:CHECK_GIT_PATH
:: Make sure Bash is in PATH (for running scripts).
SET PATH=%GITPATH%bin;%PATH%
git --version >"%temp%"\version.txt 2> nul
IF %ERRORLEVEL% == 0 GOTO CHECK_GIT_VERSION
ECHO * [91mGit to old (version is below 2.37), you need to update before installing VR we are.[0m
ECHO   [91mPlease download Git from [96m https://git-scm.com/ [0m
Goto Fail

:CHECK_GIT_VERSION
set /p Version=<"%temp%"\version.txt
del "%temp%"\version.txt
echo * %Version%  - [94mRecommended: 2.51[0m
set Version=
::pass

:Check7ZipRegistryEntry
:: Read the 7-Zip installation path from the Registry.
:: Read the 7-Zip installation path from the Registry.
::echo Checking for existing 7-Zip installation...
for %%k in (HKCU HKLM) do (
    for %%w in (\ \Wow6432Node\) do (
        for /f "skip=2 delims=: tokens=1*" %%a in ('reg query "%%k\SOFTWARE%%wMicrosoft\Windows\CurrentVersion\Uninstall\7-Zip" /v InstallLocation 2^> nul') do (
            for /f "tokens=3" %%z in ("%%a") do (
                set THE7ZIPPATH=%%z:%%b
                :: echo Found 7-Zip reg entry at "!THE7ZIPPATH!".
                goto GIT_END_7Z_REG_SEARCH
            )
        )
    )
)
ECHO [91m7-Zip not found. Please install from [96m https://www.7-zip.org/ [0m
GOTO Fail
:GIT_END_7Z_REG_SEARCH

:CHECK_7ZIP_PATH
:: Make sure Bash is in PATH (for running scripts).
SET PATH=%THE7ZIPPATH%;%PATH%
7z --help >"%temp%"\zversion.txt
IF %ERRORLEVEL% == 0 GOTO CHECK_7ZIP_VERSION
ECHO * [91m7-Zip to old, you need to update before installing VR we are.[0m
ECHO   [91mPlease download 7-Zip from [96m https://www.7-zip.org/ [0m
Goto Fail

:CHECK_7ZIP_VERSION
::type "%temp%"\zversion.txt
echo * 7-Zip found.
set Version=
::pass



:CHECK_FFMPEG_PATH
ffmpeg -version >"%temp%"\version.txt 2> nul
IF %ERRORLEVEL% == 0 GOTO CHECK_FFMPEG_VERSION
echo * [91mffmpeg not found in path, please install from [96m https://www.ffmpeg.org/ [0m
echo   [91mand add path to environment variable Path.[0m
echo   [91mE.g. call as admin: [96m"C:\Windows\system32\rundll32.exe" sysdm.cpl,EditEnvironmentVariables[0m
GOTO Fail

:CHECK_FFMPEG_VERSION
set /p Version=<"%temp%"\version.txt
del "%temp%"\version.txt
echo * %Version%  - [94mRecommended: 8.0[0m
set Version=
::pass

:CHECK_EXIF_PATH
exiftool -ver >"%temp%"\version.txt 2> nul
IF %ERRORLEVEL% == 0 GOTO CHECK_EXIF_VERSION
echo * [91mexiftool not found in path, please install from [96m https://exiftool.org/ [0m
echo   [91mrename binary to exiftool.exe, and add path to environment variable Path.[0m
echo   [91mE.g. call as admin: [96m"C:\Windows\system32\rundll32.exe" sysdm.cpl,EditEnvironmentVariables[0m
GOTO Fail

:CHECK_EXIF_VERSION
set /p Version=<"%temp%"\version.txt
del "%temp%"\version.txt
echo * Exiftool %Version% - [94mRecommended: 13.33[0m
set Version=
::pass

:CHECK_VRWEARE_VERSION
:: Read the VR we are installation path from the Registry.
:: echo Checking for existing VR we are installation...
for %%k in (HKCU HKLM) do (
    for %%w in (\ \Wow6432Node\) do (
        for /f "skip=2 delims=: tokens=1*" %%a in ('reg query "%%k\SOFTWARE%%wMicrosoft\Windows\CurrentVersion\Uninstall\VRweare" /v InstallLocation 2^> nul') do (
            for /f "tokens=3" %%z in ("%%a") do (
                set VRWEAREPATH=%%z:%%b
                goto VRWEARE_FOUND_REG_ENTRY
            )
        )
    )

)
:: VR we are not installed
IF %INTERACTIVE% equ 1 SET InstallFolder=
set VRWEAREPATH=
GOTO VRWEARE_END_REG_SEARCH

:: Found reg entry
:VRWEARE_FOUND_REG_ENTRY
IF not exist "%VRWEAREPATH%\*" (
  echo [93mWarning:[0m Invalid VR we are Registry entry found - Ignored.
  IF %INTERACTIVE% equ 1 SET InstallFolder=
  set VRWEAREPATH=
  GOTO SELECT_INSTALL_PATH
)
GOTO QUERY_UPDATE_OR_NEW


:QUERY_UPDATE_OR_NEW
IF %INTERACTIVE% equ 1 SET InstallFolder="%VRWEAREPATH%"\..
IF %INTERACTIVE% equ 1 echo * Found existing installation of VR we are at [2m%InstallFolder%[0m
IF %INTERACTIVE% equ 0 echo Found VR we are reg entry at "%VRWEAREPATH%"
IF %INTERACTIVE% equ 0 echo Removing existing VR we are installation from registry
IF %INTERACTIVE% equ 0 CALL "%VRWEAREPATH%"\Uninstall.cmd
IF %INTERACTIVE% equ 0 GOTO VRWEARE_PARENT_CHECK
:: Interactive: Ask user for new Installation
ECHO/
ECHO Please choose the installation type:
ECHO/ 
ECHO   1 - Update current installation.
ECHO   2 - Create new installation under different path.
ECHO   Q - Keep existing installation and stop.
ECHO/
CHOICE /C 1Q /M ""
IF ERRORLEVEL 3 GOTO End
IF ERRORLEVEL 2 GOTO SELECT_INSTALL_PATH
IF ERRORLEVEL 1 GOTO QueryForInstallationType
GOTO End


::continue...
:VRWEARE_END_REG_SEARCH
:: No Choice - Create new installation...
GOTO End



:SELECT_INSTALL_PATH
ECHO/
ECHO Please type the parent path of the installation and press ENTER.
ECHO/
ECHO Or alternatively drag ^& drop the folder from Windows
ECHO Explorer on this console window and press ENTER.
ECHO/

SET InstallFolder=""
SET /P "InstallFolder=Path: "
SET "InstallFolder=%InstallFolder:"=%"
IF "%InstallFolder%" == "" GOTO VRWEARE_PARENT_QUERY
SET "InstallFolder=%InstallFolder:/=\%"
IF "%InstallFolder:~-1%" == "\" SET "InstallFolder=%InstallFolder:~0,-1%"
IF "%InstallFolder%" == "" GOTO VRWEARE_PARENT_QUERY
ECHO/

if not exist "%InstallFolder%\*" (
	ECHO Invalid Path. There is no folder "%InstallFolder%".
	ECHO/
	CALL
	CHOICE /C YN /M "Do you want to enter the path once again "
	IF ERRORLEVEL 2 GOTO End
	IF ERRORLEVEL 1 GOTO VRWEARE_PARENT_QUERY
	GOTO End
)


:: Welcome Screen 
:QueryForInstallationType
::CLS
IF %INTERACTIVE% equ 0 GOTO VRWEARE_PARENT_CHECK
ECHO/
ECHO Please choose the installation type:
ECHO/ 
ECHO   1 - For automatic download and installation of all components.
ECHO       - This will ask you for an installation path
ECHO       - Opens a bash shell to continue the Installation
ECHO       - Downloads and installs ComfyUI portable, custom nodes, VR we are, models. 
ECHO       - Complete the installation and update the registry.
::ECHO   2 - For a guidance of a manual installation.
ECHO   Q - Quit
ECHO/
CHOICE /C 1Q /M ""
IF ERRORLEVEL 2 GOTO End


:: Interactive Installation Path handling
:VRWEARE_PARENT_CHECK
IF not exist "%InstallFolder%\vrweare\*" (
	mkdir "%InstallFolder%"\vrweare
)
IF not exist "%InstallFolder%\vrweare\*" (
	ECHO ERROR: Invalid Install Path. Can't create folder "%InstallFolder%\vrweare".
	ECHO/
	IF %INTERACTIVE% equ 1 GOTO SELECT_INSTALL_PATH
	GOTO Fail
)
CD /D "%InstallFolder%"\vrweare
SET "VRWEAREPATH=%cd%"

::Some parameters contains special characters. Load them over file
echo %THE7ZIPPATH% >.install-the7zippath

:: Write Bash script
echo #!/bin/bash >install.sh
echo\ >>install.sh
echo THE7ZIPPATH=`cat .install-the7zippath` >>install.sh
echo THE7ZIPPATH=`realpath "$THE7ZIPPATH"` >>install.sh
echo THE7ZIPPATH=`echo $THE7ZIPPATH` >>install.sh
echo PATH=$PATH":"$THE7ZIPPATH >>install.sh
echo\ >>install.sh
echo clear >>install.sh
echo\ >>install.sh
echo cleanup() { >>install.sh
echo  exit_code=$? >>install.sh
echo  [[ ${exit_code} -eq 0 ]] ^&^& trap - ERR ^&^& echo 0 ^>.installstatus ^&^& exit 0 >>install.sh
echo  [[ ${exit_code} -ne 0 ]] ^&^& echo -e $"\n\e[91m=== PRESS RETURN TO CONTINUE (${exit_code}) ===\e[0m" >>install.sh
echo  read WAITING_FOR_ENTER >>install.sh
echo  echo $exit_code ^>.installstatus >>install.sh
echo } >>install.sh
echo trap cleanup EXIT >>install.sh
echo download() { >>install.sh
echo    if [ -s "$2" ] ; then >>install.sh
echo      echo -ne $"\e[94m$2 already exists.\e[0m Validating Check-sum " >>install.sh
echo      echo "$3 $2" ^| sha256sum --check --status ^&^& echo -e $"\e[92mok\e[0m" ^|^| (rm -f "$2" ; echo -e $"\e[93mfailed\e[0m") >>install.sh
echo    fi >>install.sh
echo    if [ ^^! -f "$2" ] ; then >>install.sh
echo      echo -e $"\e[94mDownloading $1\e[0m" >>install.sh
echo      curl --ssl-revoke-best-effort -L $1 ^>$2 >>install.sh
echo      echo -n "Validating Check-sum " >>install.sh
echo      echo "$3 $2" ^| sha256sum --check --status ^&^& echo -e $"\e[92mok\e[0m" ^|^| (rm -f "$2" ; echo -e $"\e[91mfailed\e[0m") >>install.sh
echo    fi >>install.sh
echo    if [ ^^! -f "$2" ] ; then >>install.sh
echo      echo -e $"\e[91mCheck-sum error. Installation failed.\e[0m" >>install.sh
echo      exit 1 >>install.sh
echo    fi >>install.sh
:: ^| sha256sum -c ^<(echo "$3  -") ^|^| rm -f $2 
echo } >>install.sh
echo\ >>install.sh
:: url destination checksum
echo mkdir -p install >>install.sh
echo\ >>install.sh
:: Going for ComfyUI_windows_portable\ComfyUI\custom_nodes\comfyui_stereoscopic
echo if [ ^^! -d ComfyUI_windows_portable/ComfyUI/custom_nodes ]; then >>install.sh
:: Step 1: Download ComfyUI portable
echo   download "https://github.com/comfyanonymous/ComfyUI/releases/download/v0.3.59/ComfyUI_windows_portable_nvidia.7z" "install/comfyui.7z" "a1cf7b103c075793056a24ec33280bc8bd103f77f55bd9084bcb959456619c1a" >>install.sh
:: Step 2: Uncompress ComfyUI portable
echo   7z x install/comfyui.7z >>install.sh
echo   if [ $? -ne 0 ]; then >>install.sh
echo     echo -e $"\e[91mError while unpacking. Installation failed.\e[0m" >>install.sh
echo     exit 1 >>install.sh
echo   fi >>install.sh
echo   if [ ^^! -d ComfyUI_windows_portable/ComfyUI/custom_nodes ]; then >>install.sh
echo     echo -e $"\e[91mError while unpacking. Installation failed.\e[0m" >>install.sh
echo     exit 1 >>install.sh
echo   fi >>install.sh
echo else >>install.sh
echo   echo "ComfyUI already unpacked." >>install.sh
echo fi >>install.sh
echo\ >>install.sh
echo exit 0 >>install.sh
:: END OF BASH SCRIPT
:: pass

:: Continue installation with bash script
:CALL_BASH
ECHO/
ECHO Continue installation with bash script. Waiting for completion...
::"%GITPATH%"git-bash.exe -c 'pwd; echo -e $"\n\e[94m=== PRESS RETURN TO CONTINUE ===\e[0m" ; read x'
"%GITPATH%"git-bash.exe install.sh'
set /p CODE=<.installstatus
DEL .installstatus
ECHO Script completed. (%CODE%)
IF %CODE% equ 0 GOTO REGISTER
GOTO Fail

::REGISTER
:REGISTER
echo reg delete "HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\VRweare" /f >"%VRWEAREPATH%\\Uninstall.cmd"
echo Updating registry.
reg add "HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\VRweare" /v DisplayName /t REG_SZ /f /d "VR we are" >nul
reg add "HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\VRweare" /v DisplayVersion /t REG_SZ /f /d %VRWEARE_VERSION% >nul
reg add "HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\VRweare" /v Publisher /t REG_SZ /f /d "Fortuna Cournot" >nul
reg add "HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\VRweare" /v InstallLocation /t REG_SZ /f /d "%VRWEAREPATH%" >nul
::reg add "HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\VRweare" /v NoModify /t REG_DWORD /f /d 1 >nul
reg add "HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\VRweare" /v InstallLocation /t REG_SZ /f /d "%VRWEAREPATH%" >nul
reg add "HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\VRweare" /v UninstallString /t REG_SZ /f /d "%VRWEAREPATH%\\Uninstall.cmd" >nul
:: VR we are Path registered.
GOTO End

:Fail 
echo [91mInstallation failed.[0m (%ERRORLEVEL%)
ECHO 
exit /B 1

:: Done 
:End
echo [92mInstallation completed.[0m (%ERRORLEVEL%)
ENDLOCAL
exit /B 0
