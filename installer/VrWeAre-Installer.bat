::====================================================================
:: VR we are - (C)2025 Fortuna Cournot, https://www.3d-gallery.org/
:: Windows Installer
:: 4 Step installation:
::   - Windows Installer (this file)
::       Parameters (non-interactive mode): InstallPathParentFolder
::   - Git Bash script (generated by this file)
::   - VRweare install script (executed over ComfyUI from Git Bash script).
::   - continue with Windows Installer.
::====================================================================
@ECHO OFF 
:: Windows version check 
IF NOT "%OS%"=="Windows_NT" GOTO Fail
:: Keep variable local 
SETLOCAL enabledelayedexpansion

SET VRWEARE_VERSION=4.0

:: Files ouside of my authority with provided checksum:
:: ComfyUI_windows_portable_nvidia.7z from https://github.com/comfyanonymous/ComfyUI/releases

::SET COMFYUI_SHA=38c4cae0e4983a033d65920a3e293c58c986637c9fb15cb13274f0f5bc27ee89
::SET COMFYUI_TAG=v0.3.62

SET COMFYUI_SHA=6d17839039e3e70ec7edb757bcf330811fc645ad5c27f958233bf4d46592061e
SET COMFYUI_TAG=v0.3.65

SET PYTHON_VERSION=3.13

:: Files ouside of my authority where i provided checksum:
:: tar.gz from https://github.com/Comfy-Org/ComfyUI-Manager/tags
SET MANAGER_SHA=74829f5be66b4b3934f47bb0170e241b2e4b6617d05448b9232e818b511b7bf7
SET MANAGER_TAG=3.35
SET FFMPEG_SHA=48ca5e824d2660a94f89fd55287b7c35129b55bbe680c4330efeed5269c4820f
SET FFMPEG_TAG=8.0

:: Files redistributed through released forks:
SET VRWEARE_TAG=4.0.0-alpha
SET CUSTOMSCRIPTS_TAG=1.2.5
SET MTB_TAG=0.6.0-dev
SET CRYSTOOLS_TAG=1.27.3
SET FLORENCE2_TAG=1.0.6
SET VHS_TAG=1.7.7
SET FRAMEINTERPOL_TAG=1.0.7
SET MMAUDIO_TAG=1.0.3
SET DEPTH_ANYTHING_V2_TAG=1.0.1
::SET CONTROLNETAUX_TAG=1.1.2-rev562

:: Addional files
SET KJNODES_TAG=1.1.7


SET INTERACTIVE=1
if [%1]==[] goto DoChecks
SET INSTALLATIONTYPE=1
SET InstallFolder=%1
echo Installfolder: %InstallFolder%
SET INTERACTIVE=0
SET VRWEAREPATH=

:DoChecks
IF %INTERACTIVE% equ 0 GOTO CheckOS
CLS
ECHO/
ECHO [1m=== [92mV[91mR[0m[1m we are %VRWEARE_VERSION% - Installation ===[0m
ECHO/
ECHO Direct internet access required for downloads. No proxy support.
ECHO/
::pass

:: CheckOS
:CheckOS
FOR /f "tokens=4-5 delims=. " %%i IN ('ver') DO SET VERSION=%%i.%%j
IF "%version%" == "6.3" ECHO Windows 8.1 not supported.
IF "%version%" == "6.2" ECHO Windows 8 not supported.
IF "%version%" == "6.1" ECHO Windows 7 not supported.
IF "%version%" == "6.0" ECHO Windows Vista not supported.
IF "%version%" == "10.0" GOTO CheckArch
ECHO OS version %version%
GOTO Fail

:CheckArch
reg Query "HKLM\Hardware\Description\System\CentralProcessor\0" | find /i "x86" > NUL && set OS=32BIT || set OS=64BIT
if %OS%==32BIT echo [91mThis is a 32bit operating system. Not supported.[0m
if %OS%==64BIT GOTO CheckGitRegistryEntry
echo OS Architecture %OS%
GOTO Fail


:: Check for existing software in registry ...
:CheckGitRegistryEntry
:: Read the Git for Windows installation path from the Registry.
::echo Checking for existing Git installation...
for %%k in (HKCU HKLM) do (
    for %%w in (\ \Wow6432Node\) do (
        for /f "skip=2 delims=: tokens=1*" %%a in ('reg query "%%k\SOFTWARE%%wMicrosoft\Windows\CurrentVersion\Uninstall\Git_is1" /v InstallLocation 2^> nul') do (
            for /f "tokens=3" %%z in ("%%a") do (
                set GITPATH=%%z:%%b
                ::echo Found Git reg entry at "!GITPATH!".
                goto GIT_END_GIT_REG_SEARCH
            )
        )
    )
)
ECHO/
ECHO [91mGit not found. Please install from [96m https://git-scm.com/ [0m
:reinstallgit
ECHO/ 
ECHO   Y - Open Browser to [96mhttps://git-scm.com/[0m
ECHO   R - Retry (installed)
ECHO   Q - Quit.
ECHO/
CHOICE /C YRQ /M " "
IF ERRORLEVEL 3 GOTO Fail
CLS
IF ERRORLEVEL 2 GOTO CheckGitRegistryEntry
start "" https://github.com/git-for-windows/git/releases/download/v2.51.0.windows.2/Git-2.51.0.2-64-bit.exe
GOTO CheckGitRegistryEntry
:GIT_END_GIT_REG_SEARCH

:CHECK_GIT_PATH
:: Make sure Bash is in PATH (for running scripts).
SET PATH=%GITPATH%bin;%PATH%
git --version >"%temp%"\version.txt 2> nul
IF %ERRORLEVEL% == 0 GOTO CHECK_GIT_VERSION
ECHO * [91mGit to old, you need to update before installing VR we are.[0m
ECHO/
Goto reinstallgit

:CHECK_GIT_VERSION
set /p Version=<"%temp%"\version.txt
del "%temp%"\version.txt
echo * %Version%  - [94mRecommended: 2.51 (Warning: Older version might fail!) [0m
set Version=
::pass

:Check7ZipRegistryEntry
:: Read the 7-Zip installation path from the Registry.
:: echo Checking for existing 7-Zip installation...
for %%k in (HKCU HKLM) do (
    for %%w in (\ \Wow6432Node\) do (
        for /f "skip=2 delims=: tokens=1*" %%a in ('reg query "%%k\SOFTWARE%%wMicrosoft\Windows\CurrentVersion\Uninstall\7-Zip" /v InstallLocation 2^> nul') do (
            for /f "tokens=3" %%z in ("%%a") do (
                set THE7ZIPPATH=%%z:%%b
                :: echo Found 7-Zip reg entry at "!THE7ZIPPATH!".
                goto GIT_END_7Z_REG_SEARCH
            )
        )
    )
)
ECHO/
ECHO [91m7-Zip not found. Please install it first.[0m
:reinstall7z
ECHO/ 
ECHO   Y - Open Browser to [96mhttps://www.7-zip.org/[0m
ECHO   R - Retry (installed)
ECHO   Q - Quit.
ECHO/
CHOICE /C YRQ /M " "
IF ERRORLEVEL 3 GOTO Fail
CLS
IF ERRORLEVEL 2 GOTO Check7ZipRegistryEntry
start "" https://www.7-zip.org/
GOTO Check7ZipRegistryEntry

:GIT_END_7Z_REG_SEARCH
:CHECK_7ZIP_PATH
:: Make sure Bash is in PATH (for running scripts).
SET PATH=%THE7ZIPPATH%;%PATH%
7z --help >"%temp%"\zversion.txt
IF %ERRORLEVEL% == 0 GOTO CHECK_7ZIP_VERSION
ECHO * [91m7-Zip to old, you need to update before installing VR we are.[0m
ECHO/
ECHO Please deinstall it first. Then...
Goto reinstall7z

:CHECK_7ZIP_VERSION
::type "%temp%"\zversion.txt
echo * 7-Zip found.
set Version=
::pass

:CHECK_FFMPEG_PATH
ffmpeg -version >"%temp%"\version.txt 2> nul
IF %ERRORLEVEL% == 0 GOTO CHECK_FFMPEG_VERSION

:: LOCAL INSTALL . SKIP WIN install
echo * [94mffmpeg not found.[0m Will be installed locally (+1GB)
set FLAG_INSTALL_FFMPEG=X
GOTO CHECK_EXIF_PATH
ECHO/
echo [91mffmpeg not found in path. Please install it. Homepage: [96mhttps://www.ffmpeg.org/[0m
call RefreshEnv.cmd
IF %ERRORLEVEL% NEQ 0 GOTO Fail
:reinstallffmpeg
ECHO/ 
ECHO   Y - Open Browser to Download release 8.0 from [96mhttps://www.gyan.dev/ffmpeg/builds/[0m
ECHO   R - Retry (installed)
ECHO   Q - Quit.
ECHO/
CHOICE /C YRQ /M " "
IF ERRORLEVEL 3 GOTO Fail
CLS
IF ERRORLEVEL 2 GOTO CHECK_FFMPEG_PATH
start "" https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-full.7z
GOTO CHECK_FFMPEG_PATH

:CHECK_FFMPEG_VERSION
set /p Version=<"%temp%"\version.txt
del "%temp%"\version.txt
echo * %Version%  - [94mRecommended: 8.0[0m
set Version=
::pass

:CHECK_EXIF_PATH
exiftool -ver >"%temp%"\version.txt 2> nul
IF %ERRORLEVEL% == 0 GOTO CHECK_EXIF_VERSION
echo * [94mexiftool not found.[0m Will be installed locally.
set FLAG_INSTALL_EXIFTOOL=X
GOTO CHECK_TVAI
ECHO/
echo [91mexiftool not found in path. Please install it. Homepage: [96mhttps://exiftool.org/[0m 
echo You need to rename "exiftool(-k).exe" to "exiftool.exe" for command-line use.
call RefreshEnv.cmd
IF %ERRORLEVEL% NEQ 0 GOTO Fail
:reinstallexiftool
ECHO/ 
ECHO   Y - Open Browser to download v13.38 from [96msourceforge.net[0m
ECHO   R - Retry (installed and renamed)
ECHO   Q - Quit.
ECHO/
CHOICE /C YRQ /M " "
IF ERRORLEVEL 3 GOTO Fail
CLS
IF ERRORLEVEL 2 GOTO CHECK_EXIF_PATH
start "" https://sourceforge.net/projects/exiftool/files/exiftool-13.38_64.zip/download
GOTO CHECK_EXIF_PATH


:CHECK_EXIF_VERSION
set /p Version=<"%temp%"\version.txt
del "%temp%"\version.txt
echo * Exiftool %Version% - [94mRecommended: 13.33[0m
set Version=
::pass

:: Search for Topaz Video AI Path in registry to add it to configuration via bash script later
:: HKEY_LOCAL_MACHINE\SOFTWARE\Topaz Labs LLC\Topaz Video AI     InstallDir   ModelDir
:: TVAI_BIN_DIR, TVAI_MODEL_DATA_DIR, TVAI_MODEL_DIR
:CHECK_TVAI
for %%k in (HKCU HKLM) do (
    for %%w in (\ \Wow6432Node\) do (
        for /f "skip=2 delims=: tokens=1*" %%a in ('reg query "%%k\SOFTWARE%%wTopaz Labs LLC\Topaz Video AI" /v InstallDir 2^> nul') do (
            for /f "tokens=3" %%z in ("%%a") do (
                set TVAI_BIN_DIR=%%z:%%b
            )
        )
        for /f "skip=2 delims=: tokens=1*" %%a in ('reg query "%%k\SOFTWARE%%wTopaz Labs LLC\Topaz Video AI" /v ModelDir 2^> nul') do (
            for /f "tokens=3" %%z in ("%%a") do (
                set TVAI_MODEL_DATA_DIR=%%z:%%b
                set TVAI_MODEL_DIR=%%z:%%b
            )
        )
    )
)
echo * Topaz Video AI
echo   - TVAI_BIN_DIR=[94m%TVAI_BIN_DIR%[0m
echo   - TVAI_MODEL_DIR=[94m%TVAI_MODEL_DIR%[0m
SET TVAI_MODELERROR=0
IF exist "%TVAI_BIN_DIR%\*" (
 IF exist "%TVAI_MODEL_DIR%\*" (
  SET MODEL=prob-4
  IF exist "%TVAI_MODEL_DIR%\!MODEL!.json" (
       echo     + !MODEL! [92mok[0m
  ) ELSE (
       echo     + !MODEL! [91mMissing[0m Deactivating TVAI.
	   SET TVAI_MODELERROR=1
  )
  SET MODEL=chf-3
  IF exist "%TVAI_MODEL_DIR%\!MODEL!.json" (
       echo     + !MODEL! [92mok[0m
  ) ELSE (
       echo     + !MODEL! [91mMissing[0m Deactivating TVAI.
	   SET TVAI_MODELERROR=1
  )
 )
)


::nvidia handling
SET HAS_NVIDIA_GPU=0
IF exist "C:\Windows\System32\nvidia-smi.exe" (
  SET HAS_NVIDIA_GPU=1
)

IF "%HAS_NVIDIA_GPU%" == "0" (
  ECHO     + GPU [91mnot supported[0m
) ELSE (
  ECHO     + GPU [92mdetected:[0m
  C:\Windows\System32\nvidia-smi.exe --query-gpu=gpu_name --format=noheader,nounits
)



:CHECK_LOCAL_PYTHON
SET LOCALPYTHONPATH=
for %%k in (HKCU HKLM) do (
    for %%w in (\ \Wow6432Node\) do (
        for /f "skip=2 delims=: tokens=1*" %%a in ('reg query "%%k\SOFTWARE%%wPython\PythonCore\!PYTHON_VERSION!\InstallPath" /ve  2^> nul') do (
            for /f "tokens=3" %%z in ("%%a") do (
                set LOCALPYTHONPATH=%%z:%%b
				echo * Local Python !PYTHON_VERSION![92m ok [0m
                goto CHECK_VRWEARE_VERSION
            )
        )
    )
)
echo * Local Python !PYTHON_VERSION![91m not found[0m
goto CHECK_VRWEARE_VERSION



:CHECK_VRWEARE_VERSION
:: Read the VR we are installation path from the Registry.
:: echo Checking for existing VR we are installation...
for %%k in (HKCU HKLM) do (
    for %%w in (\ \Wow6432Node\) do (
        for /f "skip=2 delims=: tokens=1*" %%a in ('reg query "%%k\SOFTWARE%%wMicrosoft\Windows\CurrentVersion\Uninstall\VRweare" /v InstallLocation 2^> nul') do (
            for /f "tokens=3" %%z in ("%%a") do (
                set VRWEAREPATH=%%z:%%b
                goto VRWEARE_FOUND_REG_ENTRY
            )
        )
    )
)
:: VR we are not installed
IF %INTERACTIVE% equ 1 SET InstallFolder=
set VRWEAREPATH=
GOTO VRWEARE_END_REG_SEARCH

:: Found reg entry
:VRWEARE_FOUND_REG_ENTRY
IF not exist "%VRWEAREPATH%\*" (
  echo [93mWarning:[0m Invalid VR we are Registry entry found - Ignored.
  IF %INTERACTIVE% equ 1 SET InstallFolder=
  set VRWEAREPATH=
  GOTO SELECT_INSTALL_PATH
)

:QUERY_UPDATE_OR_NEW
IF %INTERACTIVE% equ 1 SET InstallFolder="%VRWEAREPATH%"\..
IF %INTERACTIVE% equ 1 echo * Found existing installation of VR we are at [2m%InstallFolder%[0m
IF %INTERACTIVE% equ 0 echo Found VR we are reg entry at "%VRWEAREPATH%"
IF %INTERACTIVE% equ 0 echo Removing existing VR we are installation from registry
IF %INTERACTIVE% equ 0 CALL "%VRWEAREPATH%"\Uninstall.cmd
IF %INTERACTIVE% equ 0 GOTO VRWEARE_PARENT_CHECK
:: Interactive: Ask user for new Installation
ECHO/
ECHO Please choose the installation type:
ECHO/ 
ECHO   1 - Update current installation (deletes existing custom nodes).
ECHO   2 - Create new installation under different path.
ECHO   Q - Keep existing installation and stop.
ECHO/
CHOICE /C 12Q /M " "
IF ERRORLEVEL 3 GOTO End
IF ERRORLEVEL 2 GOTO SELECT_INSTALL_PATH
IF ERRORLEVEL 1 GOTO PREPARE_UPDATE
GOTO End

:PREPARE_UPDATE
:: nothing yet
GOTO QueryForInstallationType

::continue...
:VRWEARE_END_REG_SEARCH
:: No Choice - Create new installation...
::pass


:SELECT_INSTALL_PATH
ECHO/
ECHO Please type the [1mparent path[0m of the installation and press ENTER.
ECHO/
ECHO Or alternatively drag ^& drop the folder from Windows
ECHO Explorer on this console window and press ENTER.
ECHO/

SET InstallFolder=""
SET /P "InstallFolder=Path: "
SET "InstallFolder=%InstallFolder:"=%"
IF "%InstallFolder%" == "" GOTO SELECT_INSTALL_PATH
SET "InstallFolder=%InstallFolder:/=\%"
IF "%InstallFolder:~-1%" == "\" SET "InstallFolder=%InstallFolder:~0,-1%"
IF "%InstallFolder%" == "" GOTO SELECT_INSTALL_PATH
ECHO/

if not exist "%InstallFolder%\*" (
	ECHO Invalid Path. There is no folder "%InstallFolder%".
	ECHO/
	CALL
	CHOICE /C YN /M "Do you want to enter the path once again "
	IF ERRORLEVEL 2 GOTO End
	IF ERRORLEVEL 1 GOTO SELECT_INSTALL_PATH
	GOTO End
)


:QueryForInstallationType
IF %INTERACTIVE% equ 0 GOTO VRWEARE_PARENT_CHECK
SET PIPELINE_OPTION_SBS=1
SET PIPELINE_OPTION_FLI2V=0
SET PIPELINE_OPTION_WATERMARK=0
:QueryForInstallationTypeCont
SET PIPELINE_OPTION_SBS_TEXT=On
SET PIPELINE_OPTION_FLI2V_TEXT=On
SET PIPELINE_OPTION_WATERMARK_TEXT=On
IF %PIPELINE_OPTION_SBS% equ 0 SET PIPELINE_OPTION_SBS_TEXT=Off
IF %PIPELINE_OPTION_FLI2V% equ 0 SET PIPELINE_OPTION_FLI2V_TEXT=Off
IF %PIPELINE_OPTION_WATERMARK% equ 0 SET PIPELINE_OPTION_WATERMARK_TEXT=Off
CLS
ECHO/
ECHO === Basic installation [13 GB] ===
ECHO Please choose the installation options:
ECHO/ 
ECHO  General options:
ECHO   1 - Pipeline with SBS-Converter: [1m%PIPELINE_OPTION_SBS_TEXT%[0m (for VR devices)
ECHO  AI-Expert options:
ECHO   2 - Judging: Pipeline for first/last image: [1m%PIPELINE_OPTION_FLI2V_TEXT%[0m
ECHO   3 - Generate Watermark (experimental): [1m%PIPELINE_OPTION_WATERMARK_TEXT%[0m
ECHO  ComfyUI options:
ECHO   Currently no selection available. 
ECHO   It will install ComfyUI %COMFYUI_TAG% Portable for modern Nvidia/CPU.
ECHO/
ECHO   Y - Yes, Install / N - No, QUIT
ECHO/
CHOICE /C 123YN /M " "
IF ERRORLEVEL 5 GOTO End
IF ERRORLEVEL 4 GOTO VRWEARE_PARENT_CHECK
IF ERRORLEVEL 3 SET /A "PIPELINE_OPTION_WATERMARK=1-%PIPELINE_OPTION_WATERMARK%" & GOTO QueryForInstallationTypeCont
IF ERRORLEVEL 2 SET /A "PIPELINE_OPTION_FLI2V=1-%PIPELINE_OPTION_FLI2V%" & GOTO QueryForInstallationTypeCont
IF ERRORLEVEL 1 SET /A "PIPELINE_OPTION_SBS=1-%PIPELINE_OPTION_SBS%" & GOTO QueryForInstallationTypeCont
GOTO End

:: nothing do do yet - pass


:: Interactive Installation Path handling
:VRWEARE_PARENT_CHECK
IF not exist "%InstallFolder%\vrweare\*" (
	mkdir "%InstallFolder%"\vrweare
)
IF not exist "%InstallFolder%\vrweare\*" (
	ECHO ERROR: Invalid Install Path. Can't create folder "%InstallFolder%\vrweare".
	ECHO/
	IF %INTERACTIVE% equ 1 GOTO SELECT_INSTALL_PATH
	GOTO Fail
)
CD /D "%InstallFolder%"\vrweare
SET "VRWEAREPATH=%cd%"

::Some parameters contains special characters. Load them over file
if defined THE7ZIPPATH (
    echo %THE7ZIPPATH% >.install-the7zippath
)

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: Write Bash script
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
echo #^^!/bin/bash >install.sh
echo\ >>install.sh
echo THE7ZIPPATH=`cat .install-the7zippath` >>install.sh
echo rm .install-the7zippath >>install.sh
echo THE7ZIPPATH=`echo $THE7ZIPPATH` >>install.sh
echo CWD=`pwd`  >>install.sh
echo cd "$THE7ZIPPATH"  >>install.sh
echo THE7ZIPPATH=`pwd`  >>install.sh
echo cd "$CWD"  >>install.sh
::echo echo THE7ZIPPATH=$THE7ZIPPATH  >>install.sh
echo PATH=$PATH":"$THE7ZIPPATH >>install.sh
echo\ >>install.sh
echo clear >>install.sh
echo echo -e $"\e[1m=== \e[92mV\e[91mR\e[0m\e[1m we are %VRWEARE_VERSION% - Installation ===\e[0m\n" >>install.sh
echo\ >>install.sh
echo cleanup() { >>install.sh
echo  exit_code=$? >>install.sh
echo  [[ ${exit_code} -eq 0 ]] ^&^& trap - ERR ^&^& echo 0 ^>.installstatus ^&^& exit 0 >>install.sh
echo  [[ ${exit_code} -ne 0 ]] ^&^& echo -e $"\n\e[91m=== PRESS RETURN TO CONTINUE (${exit_code}) ===\e[0m" >>install.sh
echo  read WAITING_FOR_ENTER >>install.sh
echo  echo $exit_code ^>.installstatus >>install.sh
echo } >>install.sh
echo trap cleanup EXIT >>install.sh
:: downloadCheck7z(): URL targetfile targetfolder shasum
echo downloadCheck7z() { >>install.sh
echo   if [ -s "$2" ] ; then >>install.sh
echo      echo -ne $"\e[94m$2 already exists.\e[0m Validating Check-sum on $2 " >>install.sh
echo      echo "$4 $2" ^| sha256sum --check --status ^&^& echo -e $"\e[92mok\e[0m" ^|^| (echo rm -f "$2" ; echo -e $"\e[93mfailed\e[0m") >>install.sh
echo   fi >>install.sh
echo   if [ ^^! -f "$2" ] ; then >>install.sh
echo      echo -e $"\e[94mDownloading $1\e[0m" >>install.sh
echo      curl --ssl-revoke-best-effort -L $1 ^>$2 >>install.sh
echo      [ ^^! $? = 0 ] ^&^& echo rm -f "$2" ^&^& echo -e $"\e[91mError during download.\e[0m" >>install.sh
echo      echo -n "Validating Check-sum " >>install.sh
echo      echo "$4 $2" ^| sha256sum --check --status ^&^& echo -e $"\e[92mok\e[0m" ^|^| (echo rm -f "$2" ; echo -e $"\e[91mfailed\e[0m") >>install.sh
echo   fi >>install.sh
echo   if [ ^^! -f "$2" ] ; then >>install.sh
echo      echo -e $"\e[91mCheck-sum error. Installation failed.\e[0m" >>install.sh
echo      exit 1 >>install.sh
echo   fi >>install.sh
echo   7z x -y $2 >>install.sh
echo   if [ $? -ne 0 ]; then >>install.sh
echo     echo -e $"\e[91mError while unpacking. Installation failed.\e[0m" >>install.sh
echo     exit 1 >>install.sh
echo   fi >>install.sh
echo   if [ ^^! -d "$3" ]; then >>install.sh
echo     echo -e $"\e[91mError while unpacking. Installation failed.\e[0m" >>install.sh
echo     exit 1 >>install.sh
echo   fi >>install.sh
echo } >>install.sh
:: installCustomNodes(): URL targetfile targetfolder [shasum]
echo installCustomNodes() { >>install.sh
echo  if [ ^^! -f $3/pyproject.toml ]; then >>install.sh
echo    if [ -s "$2" ] ; then >>install.sh
echo      echo -ne $"\e[94m$2 already exists.\e[0m " >>install.sh
echo      if [ ^^! -z "$4" ] ; then >>install.sh
echo     	echo -ne $"Validating Check-sum on $2 "   >>install.sh
echo        echo "$4 $2" ^| sha256sum --check --status ^&^& echo -e $"\e[92mok\e[0m" ^|^| (rm -f "$2" ; echo -e $"\e[93mfailed\e[0m") >>install.sh
echo      else >>install.sh
echo      	echo -e $"\e[92mok\e[0m"  >>install.sh
echo      fi >>install.sh
echo    fi >>install.sh
echo    if [ ^^! -f "$2" ] ; then >>install.sh
echo      echo -ne $"\e[94mDownloading $1\e[0m " >>install.sh
echo      curl --ssl-revoke-best-effort -L $1 ^>$2 >>install.sh
echo      [ ^^! $? = 0 ] ^&^& echo rm -f "$2" ^&^& echo -e $"\e[91mError during download.\e[0m" >>install.sh
echo      if [ -s "$2" ] ; then >>install.sh
echo        if [ ^^! -z "$4" ] ; then >>install.sh
echo          echo -n "Validating Check-sum " >>install.sh
echo          echo "$4 $2" ^| sha256sum --check --status ^&^& echo -e $"\e[92mok\e[0m" ^|^| (rm -f "$2" ; echo -e $"\e[91mfailed\e[0m") >>install.sh
echo        fi >>install.sh
echo      fi >>install.sh
echo    fi >>install.sh
echo    if [ -s "$2" ] ; then >>install.sh
echo      echo -e $"\e[92mok\e[0m" >>install.sh
echo    else >>install.sh
echo      echo -e $"\e[91mfailed\e[0m" >>install.sh
echo      exit 1 >>install.sh
echo    fi >>install.sh
echo    mkdir -p "$3" >>install.sh
echo    tar xzf $2 -C "$3" --strip-components=1 >>install.sh
echo    if [ ^^! -d "$3" ]; then >>install.sh
echo      echo -e $"\e[91mError while unpacking. Installation failed.\e[0m" >>install.sh
echo      exit 1 >>install.sh
echo    fi >>install.sh
echo  else >>install.sh
echo   echo -e $"$2 already unpacked. \e[92mok\e[0m" >>install.sh
echo  fi >>install.sh
echo } >>install.sh
:: installFile(): URL targetfile [shasum]
echo installFile() { >>install.sh
echo    if [ -s "$2" ] ; then >>install.sh
echo      if [ ^^! -z "$3" ] ; then >>install.sh
echo     	echo -ne $"Validating Check-sum on $2 "   >>install.sh
echo        echo "$3 $2" ^| sha256sum --check --status ^&^& echo -e $"\e[92mok\e[0m" ^|^| (rm -f "$2" ; echo -e $"\e[93mfailed\e[0m") >>install.sh
echo      else >>install.sh
echo      	echo -e $"\e[92mok\e[0m"  >>install.sh
echo      fi >>install.sh
echo    fi >>install.sh
echo    if [ ^^! -f "$2" ] ; then >>install.sh
echo      echo -ne $"\e[94mDownloading $1\e[0m " >>install.sh
echo      curl --ssl-revoke-best-effort -A "Wget" -L $1 ^>$2 >>install.sh
echo      [ ^^! $? = 0 ] ^&^& echo rm -f "$2" ^&^& echo -e $"\e[91mError during download.\e[0m" >>install.sh
echo      if [ -s "$2" ] ; then >>install.sh
echo        if [ ^^! -z "$3" ] ; then >>install.sh
echo          echo -n "Validating Check-sum " >>install.sh
echo          echo "$3 $2" ^| sha256sum --check --status ^&^& echo -e $"\e[92mok\e[0m" ^|^| (rm -f "$2" ; echo -e $"\e[91mfailed\e[0m") >>install.sh
echo        fi >>install.sh
echo      fi >>install.sh
echo      if [ -s "$2" ] ; then >>install.sh
echo        echo -e $"\e[92mok\e[0m" >>install.sh
echo      else >>install.sh
echo        ls -l "$2" >>install.sh
echo        echo -e $"\e[91mfailed\e[0m" >>install.sh
echo        exit 1 >>install.sh
echo      fi >>install.sh
echo    fi >>install.sh
echo } >>install.sh
echo\ >>install.sh
:: url destination checksum
echo mkdir -p install >>install.sh
echo\ >>install.sh

echo rm -f -- ComfyUI_windows_portable/ComfyUI/user/default/comfyui_stereoscopic/.daemonactive ^>/dev/null >>install.sh
echo\ >>install.sh

echo COMFYUIHOST=127.0.0.1 >>install.sh
echo COMFYUIPORT=8188 >>install.sh
echo "Checking ComfyUI status on $COMFYUIHOST/$COMFYUIPORT (upgrade git if getting stuck here) ..." >>install.sh
echo status=`true ^&^>/dev/null ^</dev/tcp/$COMFYUIHOST/$COMFYUIPORT ^&^& echo open ^|^| echo closed` >>install.sh
echo if [ "$status" = "open" ]; then >>install.sh
echo     echo -e $"\e[93m\e[1mComfyUI running\e[0m - Waiting for stop on http://""$COMFYUIHOST"":""$COMFYUIPORT ..." >>install.sh
echo     while [ "$status" = "open" ]; do >>install.sh
echo 	    sleep 1 >>install.sh
echo 		status=`true ^&^>/dev/null ^</dev/tcp/$COMFYUIHOST/$COMFYUIPORT ^&^& echo open ^|^| echo closed` >>install.sh
echo 	done >>install.sh
echo fi >>install.sh
echo\ >>install.sh

echo "Download license files..." >>install.sh
:: Download licenses . for tags from /tags/... the other from /heads/main/
echo  installFile "https://raw.githubusercontent.com/Comfy-Org/ComfyUI-Manager/refs/heads/main/LICENSE.txt" "./LICENSE_ComfyUI-Manager.TXT"  >>install.sh
echo  installFile "https://raw.githubusercontent.com/FortunaCournot/comfyui_stereoscopic/refs/tags/%VRWEARE_TAG%/LICENSE" "./LICENSE_VRweare.TXT"  >>install.sh
::echo  installFile "https://raw.githubusercontent.com/FortunaCournot/comfyui_controlnet_aux/refs/heads/main/LICENSE.txt" "./LICENSE_comfyui_controlnet_aux.TXT"  >>install.sh
echo echo "cc-by-4.0 Jukka Kijai Seppänen , https://depth-anything-v2.github.io/" ^> ./LICENSE_DepthAnythingV2.txt >>install.sh
echo  installFile "https://raw.githubusercontent.com/FortunaCournot/ComfyUI-Custom-Scripts/refs/heads/main/LICENSE" "./LICENSE_ComfyUI-Custom-Scripts.TXT"  >>install.sh
echo  installFile "https://raw.githubusercontent.com/FortunaCournot/comfy_mtb/refs/heads/main/LICENSE" "./LICENSE_comfy_mtb.TXT"  >>install.sh
echo  installFile "https://raw.githubusercontent.com/FortunaCournot/ComfyUI-Crystools/refs/heads/main/LICENSE" "./LICENSE_ComfyUI-Crystools.TXT"  >>install.sh
echo  installFile "https://raw.githubusercontent.com/FortunaCournot/ComfyUI-Florence2/refs/heads/main/LICENSE" "./LICENSE_ComfyUI-Florence2.TXT"  >>install.sh
echo  installFile "https://raw.githubusercontent.com/FortunaCournot/ComfyUI-VideoHelperSuite/refs/heads/main/LICENSE" "./LICENSE_ComfyUI-VideoHelperSuite.TXT"  >>install.sh
echo  installFile "https://raw.githubusercontent.com/FortunaCournot/ComfyUI-Frame-Interpolation/refs/heads/main/LICENSE" "./LICENSE_ComfyUI-Frame-Interpolation.TXT"  >>install.sh
echo  installFile "https://raw.githubusercontent.com/FortunaCournot/ComfyUI-MMAudio/refs/heads/main/LICENSE" "./LICENSE_ComfyUI-MMAudio.TXT"  >>install.sh
echo\ >>install.sh
echo  installFile "https://raw.githubusercontent.com/hkchengrex/MMAudio/refs/heads/main/LICENSE" "./LICENSE_MMAudio.TXT"  >>install.sh
echo  installFile "https://raw.githubusercontent.com/xinntao/Real-ESRGAN/refs/heads/master/LICENSE" "./LICENSE_Real-ESRGAN.TXT"  >>install.sh
echo  installFile "https://huggingface.co/stabilityai/control-lora/resolve/main/LICENSE.MD?download=true" "./LICENSE_STABILITY-AI_CONTROL-LORA.MD"  >>install.sh
echo  installFile "https://raw.githubusercontent.com/FortunaCournot/ComfyUI-KJNodes/refs/heads/1.1.7/LICENSE" "./LICENSE_ComfyUI-KJNodes.TXT"  >>install.sh
if defined FLAG_INSTALL_FFMPEG (
echo  installFile "https://raw.githubusercontent.com/FFmpeg/FFmpeg/refs/heads/master/LICENSE.md" "./LICENSE_ffmpeg.md"  >>install.sh
)
if defined FLAG_INSTALL_EXIFTOOL (
echo  "ExifTool by Phil Harvey. This is free software; you can redistribute it and/or modify it under the same terms as Perl itself. https://dev.perl.org/licenses/" ^> ./LICENSE_Exiftool.txt  >>install.sh
)

:: Ask user for commitment
echo\ >>install.sh
echo clear >>install.sh
echo echo -e $"\e[1m=== \e[92mV\e[91mR\e[0m\e[1m we are %VRWEARE_VERSION% - LICENSE AGREEMENT ===\e[0m\n" >>install.sh
echo echo -e $" " >>install.sh
echo echo -e $"This software depends on other software. It's protected by licenses." >>install.sh
echo echo -e $"The license files have been downloaded to "`pwd`":" >>install.sh
echo ls ./LICENSE*.* >>install.sh
echo echo -e $" " >>install.sh
echo while true; do >>install.sh
echo     read -p "Do you commit to them and wish to install this program (y/n)? " yn >>install.sh
echo     case $yn in >>install.sh
echo         [Yy]* ) break;; >>install.sh
echo         [Nn]* ) exit 1;; >>install.sh
echo         * ) echo "Please answer yes or no.";; >>install.sh
echo     esac >>install.sh
echo done >>install.sh
echo mkdir ./LICENSE >>install.sh
echo mv -- ./LICENSE* ./LICENSE >>install.sh
echo clear >>install.sh
echo echo -e $"\e[1m=== \e[92mV\e[91mR\e[0m\e[1m we are %VRWEARE_VERSION% - Installing... ===\e[0m\n" >>install.sh
echo echo -e $" " >>install.sh

::  clear any old python and custom nodes and flag for reinstallation
echo   rm -f  -- ComfyUI_windows_portable/ComfyUI/user/default/comfyui_stereoscopic/.daemonactive >>install.sh
echo   rm -f  -- ComfyUI_windows_portable/ComfyUI/user/default/comfyui_stereoscopic/.guiactive >>install.sh
echo   rm -rf  -- ComfyUI_windows_portable/ComfyUI/custom_nodes >>install.sh
echo   rm -rf  -- ComfyUI_windows_portable/python_embeded >>install.sh

echo if [ ^^! -d ComfyUI_windows_portable/ComfyUI/custom_nodes ]; then >>install.sh
:: Download and unpackage ComfyUI portable - GNU GENERAL PUBLIC LICENSE v3 (c) ComfyUI Code Owners
echo   downloadCheck7z "https://github.com/comfyanonymous/ComfyUI/releases/download/%COMFYUI_TAG%/ComfyUI_windows_portable_nvidia.7z" "install/comfyui.7z" "ComfyUI_windows_portable/ComfyUI/custom_nodes" "%COMFYUI_SHA%"  >>install.sh
echo else >>install.sh
echo   echo -e $"Couldn't delete old custom_nodes. \e[91Failed\e[0m" >>install.sh
echo   exit 1 >>install.sh
echo fi >>install.sh
echo\ >>install.sh


::  Download and install rest of prerequisites
echo mkdir -p ./ComfyUI_windows_portable/ComfyUI/user/default/comfyui_stereoscopic    >>install.sh
echo echo "" ^>./ComfyUI_windows_portable/ComfyUI/user/default/comfyui_stereoscopic/.environment >>install.sh
if defined FLAG_INSTALL_FFMPEG (
echo  installFile "https://github.com/GyanD/codexffmpeg/releases/download/8.0/ffmpeg-%FFMPEG_TAG%-full_build.zip" "install/ffmpeg.zip" %FFMPEG_SHA% >>install.sh
echo  unzip -qo install/ffmpeg.zip -d .  >>install.sh
echo FFMPEGPATH=`ls  ^| grep ffmpeg-`      >>install.sh
echo FFMPEGPATH=`echo $FFMPEGPATH`"bin"  >>install.sh
echo FFMPEGPATH=`realpath $FFMPEGPATH`  >>install.sh
echo echo "PATH=$FFMPEGPATH:""$""PATH" ^>^>./ComfyUI_windows_portable/ComfyUI/user/default/comfyui_stereoscopic/.environment >>install.sh
echo echo "export PATH" ^>^>./ComfyUI_windows_portable/ComfyUI/user/default/comfyui_stereoscopic/.environment >>install.sh
echo\ >>install.sh
)
if defined FLAG_INSTALL_EXIFTOOL (
echo  installFile "https://sourceforge.net/projects/exiftool/files/exiftool-13.39_64.zip" "install/exiftool.zip"  >>install.sh
echo  unzip -qo install/exiftool.zip -d .  >>install.sh
echo EXIFPATH=`ls  ^| grep exiftool-`   >>install.sh
echo EXIFPATH=`realpath $EXIFPATH`   >>install.sh
echo mv "$EXIFPATH/exiftool(-k).exe" "$EXIFPATH/exiftool.exe"   >>install.sh
echo echo "PATH=$EXIFPATH:""$""PATH" ^>^>./ComfyUI_windows_portable/ComfyUI/user/default/comfyui_stereoscopic/.environment >>install.sh
echo echo "export PATH" ^>^>./ComfyUI_windows_portable/ComfyUI/user/default/comfyui_stereoscopic/.environment >>install.sh
echo\ >>install.sh
)

::  Download and unpackage comfyui nodes
echo   installCustomNodes "https://github.com/Comfy-Org/ComfyUI-Manager/archive/refs/tags/%MANAGER_TAG%.tar.gz" "install/manager.tar.gz" "ComfyUI_windows_portable/ComfyUI/custom_nodes/comfyui-manager" "%MANAGER_SHA%" >>install.sh
echo   installCustomNodes "https://github.com/FortunaCournot/comfyui_stereoscopic/archive/refs/tags/%VRWEARE_TAG%.tar.gz" "install/stereoscopic.tar.gz" "ComfyUI_windows_portable/ComfyUI/custom_nodes/comfyui_stereoscopic"  >>install.sh 
::echo   installCustomNodes "https://github.com/FortunaCournot/comfyui_controlnet_aux/archive/refs/tags/%CONTROLNETAUX_TAG%.tar.gz"  "install/controlnetaux.tar.gz" "ComfyUI_windows_portable/ComfyUI/custom_nodes/comfyui_controlnet_aux" >>install.sh
echo   installCustomNodes "https://github.com/FortunaCournot/ComfyUI-DepthAnythingV2/archive/refs/tags/%DEPTH_ANYTHING_V2_TAG%.tar.gz"  "install/depthanythingv2.tar.gz" "ComfyUI_windows_portable/ComfyUI/custom_nodes/comfyui-depthanythingv2" >>install.sh
echo   installCustomNodes "https://github.com/FortunaCournot/ComfyUI-Custom-Scripts/archive/refs/tags/%CUSTOMSCRIPTS_TAG%.tar.gz" "install/customscripts.tar.gz" "ComfyUI_windows_portable/ComfyUI/custom_nodes/comfyui-custom-scripts" >>install.sh
echo   installCustomNodes "https://github.com/FortunaCournot/comfy_mtb/archive/refs/tags/%MTB_TAG%.tar.gz" "install/mtb.tar.gz" "ComfyUI_windows_portable/ComfyUI/custom_nodes/comfy-mtb" >>install.sh
echo   installCustomNodes "https://github.com/FortunaCournot/ComfyUI-Crystools/archive/refs/tags/%CRYSTOOLS_TAG%.tar.gz" "install/crystools.tar.gz" "ComfyUI_windows_portable/ComfyUI/custom_nodes/comfyui-crystools" >>install.sh
echo   installCustomNodes "https://github.com/FortunaCournot/ComfyUI-Florence2/archive/refs/tags/%FLORENCE2_TAG%.tar.gz" "install/florence2.tar.gz" "ComfyUI_windows_portable/ComfyUI/custom_nodes/comfyui-florence2" >>install.sh
echo   installCustomNodes "https://github.com/FortunaCournot/ComfyUI-VideoHelperSuite/archive/refs/tags/%VHS_TAG%.tar.gz" "install/vhs.tar.gz" "ComfyUI_windows_portable/ComfyUI/custom_nodes/comfyui-videohelpersuite" >>install.sh
echo   installCustomNodes "https://github.com/FortunaCournot/ComfyUI-Frame-Interpolation/archive/refs/tags/%FRAMEINTERPOL_TAG%.tar.gz" "install/frameinterpol.tar.gz" "ComfyUI_windows_portable/ComfyUI/custom_nodes/comfyui-frame-interpolation" >>install.sh
echo   installCustomNodes "https://github.com/FortunaCournot/ComfyUI-MMAudio/archive/refs/tags/%MMAUDIO_TAG%.tar.gz" "install/mmaudio.tar.gz" "ComfyUI_windows_portable/ComfyUI/custom_nodes/comfyui-mmaudio" >>install.sh
echo   installCustomNodes "https://github.com/FortunaCournot/ComfyUI-KJNodes/archive/refs/tags/%KJNODES_TAG%.tar.gz" "install/kjnodes.tar.gz" "ComfyUI_windows_portable/ComfyUI/custom_nodes/comfyui-mmaudio" >>install.sh

echo\ >>install.sh

:: Clear git files
echo   rm -rf ComfyUI_windows_portable/ComfyUI/custom_nodes/*/.github >>install.sh
echo\ >>install.sh

:: Other requirements: Install models

:: Audio
echo mkdir -p ComfyUI_windows_portable/ComfyUI/models/mmaudio  >>install.sh
:: MMAudio models MIT License - Copyright (c) 2024 Sony Research Inc.
echo   installFile "https://huggingface.co/Kijai/MMAudio_safetensors/resolve/main/apple_DFN5B-CLIP-ViT-H-14-384_fp16.safetensors?download=true" "ComfyUI_windows_portable/ComfyUI/models/mmaudio/apple_DFN5B-CLIP-ViT-H-14-384_fp16.safetensors" "d8ad903a79adc2b29bacfeedabfa3d78b03d36d3b4dcb885c0649fe8c5d763cb" >>install.sh
echo   installFile "https://huggingface.co/Kijai/MMAudio_safetensors/resolve/main/mmaudio_large_44k_v2_fp16.safetensors?download=true" "ComfyUI_windows_portable/ComfyUI/models/mmaudio/mmaudio_large_44k_v2_fp16.safetensors" "a61378951ba4e8bfde2e977c0ad8211a7e02e1e92fd6a5b1c258a6464c1d102f" >>install.sh
echo   installFile "https://huggingface.co/Kijai/MMAudio_safetensors/resolve/main/mmaudio_synchformer_fp16.safetensors?download=true" "ComfyUI_windows_portable/ComfyUI/models/mmaudio/mmaudio_synchformer_fp16.safetensors" "b8d05128c76da6ee88720a89d25a5f86c603589883d02b53f563c3c66afe3581" >>install.sh
echo   installFile "https://huggingface.co/Kijai/MMAudio_safetensors/resolve/main/mmaudio_vae_44k_fp16.safetensors?download=true" "ComfyUI_windows_portable/ComfyUI/models/mmaudio/mmaudio_vae_44k_fp16.safetensors" "2598189f081bd10c86975106e5b6e2490168667429a75b52d77671283f245649" >>install.sh
echo\ >>install.sh

:: LICENSE_Real-ESRGAN upscaling - BSD 3-Clause License - Copyright (c) 2021, Xintao Wang
echo   installFile "https://github.com/xinntao/Real-ESRGAN/releases/download/v0.2.1/RealESRGAN_x2plus.pth" "ComfyUI_windows_portable/ComfyUI/models/upscale_models/RealESRGAN_x2plus.pth" "49fafd45f8fd7aa8d31ab2a22d14d91b536c34494a5cfe31eb5d89c2fa266abb" >>install.sh
echo   installFile "https://github.com/xinntao/Real-ESRGAN/releases/download/v0.1.0/RealESRGAN_x4plus.pth" "ComfyUI_windows_portable/ComfyUI/models/upscale_models/RealESRGAN_x4plus.pth" "4fa0d38905f75ac06eb49a7951b426670021be3018265fd191d2125df9d682f1" >>install.sh
echo\ >>install.sh

:: STABILITY AI CONTROL-LORA - COMMUNITY LICENSE AGREEMENT
echo mkdir -p ComfyUI_windows_portable/ComfyUI/models/controlnet/sdxl  >>install.sh
echo   installFile "https://huggingface.co/stabilityai/control-lora/resolve/main/control-LoRAs-rank256/control-lora-recolor-rank256.safetensors?download=true" "ComfyUI_windows_portable/ComfyUI/models/controlnet/sdxl/control-lora-recolor-rank256.safetensors" "b0bf3c163b6f578b3a73e9cf61c3e4219ae9c2a06903663205d1251cf2498925" >>install.sh
echo\ >>install.sh
:: pass

:: Install default pipeline
ECHO cp ComfyUI_windows_portable/ComfyUI/custom_nodes/comfyui_stereoscopic/config/default_autoforward-template.yaml ComfyUI_windows_portable/ComfyUI/custom_nodes/comfyui_stereoscopic/config/default_autoforward.yaml  >>install.sh
:: Apply install options
IF %PIPELINE_OPTION_SBS% equ 0 ECHO sed -i "s/: tasks\/no-sbs/: fullsbs/g" ComfyUI_windows_portable/ComfyUI/custom_nodes/comfyui_stereoscopic/config/default_autoforward.yaml  >>install.sh
IF %PIPELINE_OPTION_FLI2V% equ 0 ECHO sed -i "s/FLIMAGE_TARGET/caption/g" ComfyUI_windows_portable/ComfyUI/custom_nodes/comfyui_stereoscopic/config/default_autoforward.yaml  >>install.sh
IF %PIPELINE_OPTION_FLI2V% equ 1 ECHO sed -i "s/FLIMAGE_TARGET/tasks\/first-last-image/g" ComfyUI_windows_portable/ComfyUI/custom_nodes/comfyui_stereoscopic/config/default_autoforward.yaml  >>install.sh
IF %PIPELINE_OPTION_WATERMARK% equ 0 ECHO sed -i "s/watermark\/encrypt/tasks\/first-last-image/g" ComfyUI_windows_portable/ComfyUI/custom_nodes/comfyui_stereoscopic/config/default_autoforward.yaml  >>install.sh

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: Continue installation with bash script
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:CALL_BASH
ECHO/
ECHO Continue installation with bash script. Waiting for completion...
::"%GITPATH%"git-bash.exe -c 'pwd; echo -e $"\n\e[94m=== PRESS RETURN TO CONTINUE ===\e[0m" ; read x'
"%GITPATH%"git-bash.exe install.sh
set /p CODE=<.installstatus
DEL .installstatus
ECHO Script completed. (%CODE%)
IF %CODE% equ 0 GOTO REGISTER
GOTO Fail

::REGISTER
:REGISTER
echo reg delete "HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\VRweare" /f >"%VRWEAREPATH%\\Uninstall.cmd"
ECHO RMDIR /S /Q %VRWEAREPATH%\install >>"%VRWEAREPATH%\\Uninstall.cmd"
ECHO RMDIR /S /Q %VRWEAREPATH%\ComfyUI_windows_portable\python_embeded >>"%VRWEAREPATH%\\Uninstall.cmd"
ECHO RMDIR /S /Q %VRWEAREPATH%\ComfyUI_windows_portable\update >>"%VRWEAREPATH%\\Uninstall.cmd"
ECHO RMDIR /S /Q %VRWEAREPATH%\ComfyUI_windows_portable\ComfyUI\.ci >>"%VRWEAREPATH%\\Uninstall.cmd"
ECHO RMDIR /S /Q %VRWEAREPATH%\ComfyUI_windows_portable\ComfyUI\.git >>"%VRWEAREPATH%\\Uninstall.cmd"
ECHO RMDIR /S /Q %VRWEAREPATH%\ComfyUI_windows_portable\ComfyUI\.github >>"%VRWEAREPATH%\\Uninstall.cmd"
ECHO RMDIR /S /Q %VRWEAREPATH%\ComfyUI_windows_portable\ComfyUI\custom_nodes >>"%VRWEAREPATH%\\Uninstall.cmd"
ECHO RMDIR /S /Q %VRWEAREPATH%\ComfyUI_windows_portable\ComfyUI\models\mmaudio >>"%VRWEAREPATH%\\Uninstall.cmd"
ECHO DEL /Q %VRWEAREPATH%\ComfyUI_windows_portable\ComfyUI\models\upscale_models\RealESRGAN*.* >>"%VRWEAREPATH%\\Uninstall.cmd"
ECHO DEL /Q %VRWEAREPATH%\ComfyUI_windows_portable\ComfyUI\models\controlnet\sdxl\control-lora-recolor-*.* >>"%VRWEAREPATH%\\Uninstall.cmd"
ECHO DEL /Q %VRWEAREPATH%\ComfyUI_windows_portable\*.bat >>"%VRWEAREPATH%\\Uninstall.cmd"
ECHO RMDIR /S /Q %VRWEAREPATH%\res >>"%VRWEAREPATH%\\Uninstall.cmd"
ECHO RMDIR /S /Q %VRWEAREPATH%\LICENSE >>"%VRWEAREPATH%\\Uninstall.cmd"
echo Updating registry.
reg add "HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\VRweare" /v DisplayName /t REG_SZ /f /d "VR we are" >nul
reg add "HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\VRweare" /v DisplayVersion /t REG_SZ /f /d %VRWEARE_VERSION% >nul
reg add "HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\VRweare" /v Publisher /t REG_SZ /f /d "Fortuna Cournot" >nul
reg add "HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\VRweare" /v InstallLocation /t REG_SZ /f /d "%VRWEAREPATH%" >nul
::reg add "HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\VRweare" /v NoModify /t REG_DWORD /f /d 1 >nul
reg add "HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\VRweare" /v UninstallString /t REG_SZ /f /d "%VRWEAREPATH%\\Uninstall.cmd" >nul
:: VR we are Path registered.
if defined FLAG_INSTALL_FFMPEG (
FOR /D %%i IN (%VRWEAREPATH%\ffmpeg-*) DO ECHO rmdir /S /Q "%%i" >>"%VRWEAREPATH%\\Uninstall.cmd"
)
if defined FLAG_INSTALL_EXIFTOOL (
FOR /D %%i IN (%VRWEAREPATH%\exiftool-*) DO ECHO rmdir /S /Q "%%i" >>"%VRWEAREPATH%\\Uninstall.cmd"
)
:: ECHO DEL %VRWEAREPATH%\Uninstall.cmd >>"%VRWEAREPATH%\\Uninstall.cmd"


:: Install python requirements
cd ComfyUI_windows_portable
SET PATH=%VRWEAREPATH%\ComfyUI_windows_portable\python_embeded\Scripts;%PATH%
ECHO Install python requirements...
.\python_embeded\python -m pip install -r ComfyUI\custom_nodes\comfyui-manager\requirements.txt
.\python_embeded\python -m pip install -r ComfyUI\custom_nodes\comfyui_stereoscopic\requirements.txt
::.\python_embeded\python -m pip install -r ComfyUI\custom_nodes\comfyui_controlnet_aux\requirements.txt
.\python_embeded\python -m pip install -r ComfyUI\custom_nodes\comfy-mtb\requirements.txt
.\python_embeded\python -m pip install -r ComfyUI\custom_nodes\comfyui-crystools\requirements.txt
.\python_embeded\python -m pip install -r ComfyUI\custom_nodes\comfyui-florence2\requirements.txt
.\python_embeded\python -m pip install -r ComfyUI\custom_nodes\comfyui-videohelpersuite\requirements.txt
.\python_embeded\python -m pip install -r ComfyUI\custom_nodes\comfyui-frame-interpolation\requirements-no-cupy.txt
.\python_embeded\python -m pip install -r ComfyUI\custom_nodes\comfyui-mmaudio\requirements.txt
:: Some fixes
ECHO Apply python fixes...
:: Crystools
.\python_embeded\python -m pip install -I piexif pynvml
:: ComfyUI-MMAudio
.\python_embeded\python -m pip install -I wcwidth decorator platformdirs
:: ComfyUI-Florence2
.\python_embeded\python -m pip install -I matplotlib

:: skip these fixes:
::.\python_embeded\python -m pip install --upgrade numpy==2.2
::.\python_embeded\python -m pip install -I opencv-python


DEL %VRWEAREPATH%\ComfyUI_windows_portable\run_nvidia_gpu.bat
IF "%LOCALPYTHONPATH%" == "" GOTO END_INSTALL_PACKS
IF "%HAS_NVIDIA_GPU%" == "0" GOTO END_INSTALL_PACKS

:: Following KronoKnights manual (https://www.reddit.com/r/StableDiffusion/comments/1jle4re/how_to_run_a_rtx_5090_50xx_with_triton_and_sage/)
:: copy python libs
ECHO Copying Python libs for Sage Attention
mkdir %VRWEAREPATH%\ComfyUI_windows_portable\python_embeded\libs
copy /B %LOCALPYTHONPATH%libs\*.lib %VRWEAREPATH%\ComfyUI_windows_portable\python_embeded\libs

:: sage attention dependencies
ECHO Installing dependencies for Sage Attention
.\python_embeded\python -m pip install --force-reinstall --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/cu128
.\python_embeded\python -m pip install bitsandbytes
.\python_embeded\python -s -m pip install "accelerate >= 1.4.0"
.\python_embeded\python -s -m pip install "diffusers >= 0.32.2"
.\python_embeded\python -s -m pip install "transformers >= 4.49.0"
.\python_embeded\python -s -m pip install ninja
.\python_embeded\python -s -m pip install wheel
.\python_embeded\python -s -m pip install packaging
.\python_embeded\python -s -m pip install onnxruntime-gpu --extra-index-url https://aiinfra.pkgs.visualstudio.com/PublicPackages/packaging/onnxruntime-cuda-12/pypi/simple/


ECHO Installing Triton and Sage Attention
.\python_embeded\python -m pip install -U --pre triton-windows
cd python_embeded
git clone https://github.com/thu-ml/SageAttention
cd ..
.\python_embeded\python -m pip install sageattention
echo .\python_embeded\python.exe -s ComfyUI\main.py --windows-standalone-build --use-sage-attention >%VRWEAREPATH%\ComfyUI_windows_portable\run_nvidia_gpu.bat
echo pause >>%VRWEAREPATH%\ComfyUI_windows_portable\run_nvidia_gpu.bat
:END_INSTALL_PACKS
cd ..


:CREATE_SHORTCUTS
mkdir %VRWEAREPATH%\res
copy %VRWEAREPATH%\ComfyUI_windows_portable\ComfyUI\custom_nodes\comfyui_stereoscopic\installer\res\*.ico %VRWEAREPATH%\res

set SCRIPT="%TEMP%\%RANDOM%-%RANDOM%-%RANDOM%-%RANDOM%.vbs"
echo Set oWS = WScript.CreateObject("WScript.Shell") >> %SCRIPT%
echo sLinkFile = "%USERPROFILE%\Desktop\VR we are - Service Daemon.lnk" >> %SCRIPT%
echo Set oLink = oWS.CreateShortcut(sLinkFile) >> %SCRIPT%
echo oLink.WindowStyle = 7 >> %SCRIPT%
echo oLink.TargetPath = "%VRWEAREPATH%\ComfyUI_windows_portable\ComfyUI\custom_nodes\comfyui_stereoscopic\daemon.bat" >> %SCRIPT%
echo oLink.WorkingDirectory = "%VRWEAREPATH%\ComfyUI_windows_portable\ComfyUI\custom_nodes\comfyui_stereoscopic\" >> %SCRIPT%
echo oLink.IconLocation = "%VRWEAREPATH%\res\vrweare.ico"  >> %SCRIPT%
echo oLink.Save >> %SCRIPT%
cscript /nologo %SCRIPT%
del %SCRIPT%

set SCRIPT="%TEMP%\%RANDOM%-%RANDOM%-%RANDOM%-%RANDOM%.vbs"
echo Set oWS = WScript.CreateObject("WScript.Shell") >> %SCRIPT%
echo sLinkFile = "%USERPROFILE%\Desktop\VR we are - App.lnk" >> %SCRIPT%
echo Set oLink = oWS.CreateShortcut(sLinkFile) >> %SCRIPT%
echo oLink.WindowStyle = 7 >> %SCRIPT%
echo oLink.TargetPath = "%VRWEAREPATH%\ComfyUI_windows_portable\ComfyUI\custom_nodes\comfyui_stereoscopic\restart_gui.bat" >> %SCRIPT%
echo oLink.WorkingDirectory = "%VRWEAREPATH%\ComfyUI_windows_portable\ComfyUI\custom_nodes\comfyui_stereoscopic\" >> %SCRIPT%
echo oLink.IconLocation = "%VRWEAREPATH%\res\vrweare.ico"  >> %SCRIPT%
echo oLink.Save >> %SCRIPT%
cscript /nologo %SCRIPT%
del %SCRIPT%

IF "%HAS_NVIDIA_GPU%" == "0" GOTO NO_GPU 
set SCRIPT="%TEMP%\%RANDOM%-%RANDOM%-%RANDOM%-%RANDOM%.vbs"
echo Set oWS = WScript.CreateObject("WScript.Shell") >> %SCRIPT%
echo sLinkFile = "%USERPROFILE%\Desktop\ComfyUI Nvidea GPU.lnk" >> %SCRIPT%
echo Set oLink = oWS.CreateShortcut(sLinkFile) >> %SCRIPT%
echo oLink.TargetPath = "%VRWEAREPATH%\ComfyUI_windows_portable\run_nvidia_gpu.bat" >> %SCRIPT%
echo oLink.WorkingDirectory = "%VRWEAREPATH%\ComfyUI_windows_portable\" >> %SCRIPT%
echo oLink.IconLocation = "%VRWEAREPATH%\res\comfyui.ico"  >> %SCRIPT%
echo oLink.Save >> %SCRIPT%
cscript /nologo %SCRIPT%
del %SCRIPT%
GOTO DESKTOP_LINKS_DONE

:NO_GPU
set SCRIPT="%TEMP%\%RANDOM%-%RANDOM%-%RANDOM%-%RANDOM%.vbs"
echo Set oWS = WScript.CreateObject("WScript.Shell") >> %SCRIPT%
echo sLinkFile = "%USERPROFILE%\Desktop\ComfyUI CPU.lnk" >> %SCRIPT%
echo Set oLink = oWS.CreateShortcut(sLinkFile) >> %SCRIPT%
echo oLink.TargetPath = "%VRWEAREPATH%\ComfyUI_windows_portable\run_cpu.bat" >> %SCRIPT%
echo oLink.WorkingDirectory = "%VRWEAREPATH%\ComfyUI_windows_portable\" >> %SCRIPT%
echo oLink.IconLocation = "%VRWEAREPATH%\res\comfyui.ico"  >> %SCRIPT%
echo oLink.Save >> %SCRIPT%
cscript /nologo %SCRIPT%
del %SCRIPT%
:DESKTOP_LINKS_DONE

::write profile for configuration used when prerequisite script generates configuration
ECHO %TVAI_BIN_DIR% > "%VRWEAREPATH%\ComfyUI_windows_portable\ComfyUI\user\default\comfyui_stereoscopic\.TVAI_BIN_DIR"
IF TVAI_MODELERROR == 0 ECHO %TVAI_BIN_DIR% > "%VRWEAREPATH%\ComfyUI_windows_portable\ComfyUI\user\default\comfyui_stereoscopic\.TVAI_MODEL_DIR"
IF TVAI_MODELERROR == 1 ECHO %TVAI_BIN_DIR% > "%VRWEAREPATH%\ComfyUI_windows_portable\ComfyUI\user\default\comfyui_stereoscopic\.TVAI_MODEL_DIR"
ECHO # Bash Profile for Configuration Installer > "%VRWEAREPATH%\ComfyUI_windows_portable\ComfyUI\user\default\comfyui_stereoscopic\.installprofile"
ECHO TVAI_BIN_DIR=`cat ./user/default/comfyui_stereoscopic/.TVAI_BIN_DIR`  >> "%VRWEAREPATH%\ComfyUI_windows_portable\ComfyUI\user\default\comfyui_stereoscopic\.installprofile"
ECHO TVAI_MODEL_DIR=`cat ./user/default/comfyui_stereoscopic/.TVAI_MODEL_DIR`  >> "%VRWEAREPATH%\ComfyUI_windows_portable\ComfyUI\user\default\comfyui_stereoscopic\.installprofile"
	   
:: Start server and service to complete installation
:Start
IF %INTERACTIVE% equ 0 GOTO Final
CLS
ECHO/
ECHO [1m=== [92mV[91mR[0m[1m we are %VRWEARE_VERSION% - Start ===[0m
ECHO/
ECHO Starting server and service to complete installation... 3 windows get opened:
ECHO - ComfyUI Server
ECHO - VR we are - Service Daemon
ECHO - VR we are - App
ECHO/

RMDIR /S /Q "%VRWEAREPATH%\ComfyUI_windows_portable\ComfyUI\custom_nodes\comfyui_stereoscopic\.test"
START /D "%VRWEAREPATH%\ComfyUI_windows_portable\ComfyUI\custom_nodes\comfyui_stereoscopic" "VR we are - Service" /MIN CMD /K CALL "%GITPATH%"git-bash.exe daemon.sh >NUL
START /D "%VRWEAREPATH%\ComfyUI_windows_portable" "ComfyUI First Start" CMD /C CALL "%VRWEAREPATH%\ComfyUI_windows_portable\run_cpu.bat" > NUL
::pass


:: wait for test to start
ECHO Waiting for tests to start...
:TESTS
timeout 1 > NUL
if not exist "%VRWEAREPATH%\ComfyUI_windows_portable\ComfyUI\custom_nodes\comfyui_stereoscopic\.test\.install" GOTO TESTS

:: wait for test to complete or fail
ECHO Waiting for tests to complete...
:WAIT_FOR_TEST_FINISH
if exist "%VRWEAREPATH%\ComfyUI_windows_portable\ComfyUI\custom_nodes\comfyui_stereoscopic\.test\.install" (
	if not exist "%VRWEAREPATH%\ComfyUI_windows_portable\ComfyUI\custom_nodes\comfyui_stereoscopic\.test\.signalfail" (
		timeout 1 > NUL
		GOTO WAIT_FOR_TEST_FINISH
	)
)
:: check test success
if exist "%VRWEAREPATH%\ComfyUI_windows_portable\ComfyUI\custom_nodes\comfyui_stereoscopic\.test\.install" (
    timeout 1 > NUL
    ECHO [91mTests failed. Fix errors and restart service daemon.[0m Located at:
    GOTO Fail
)
ECHO [92mTests passed.[0m
ECHO/

:: Clean-up
::ECHO You can clear install folder now to free space.
DEL install.sh
RMDIR /S /Q install
GOTO End

:Fail 
ECHO [91mInstallation failed.[0m (%ERRORLEVEL%)
ECHO Please remove any intermediate files manually.
ECHO If you executed install script by double-click, try to execute in fresh command prompt window instead.
ECHO/ 
pause
exit /B 1

:: Done 
:End
echo [92mInstallation completed.[0m - Check the logs of the windows for any errors.
ECHO/ 
ECHO [94mDon't forget to read the documentation. You can open it in the app toolbar in browser or[0m
ECHO [94mor at [96m%VRWEAREPATH%\ComfyUI_windows_portable\ComfyUI\custom_nodes\comfyui_stereoscopic\docs\VR_We_Are_User_Manual.pdf[0m
IF %INTERACTIVE% equ 1 PAUSE

:Final
ENDLOCAL
exit /B 0
