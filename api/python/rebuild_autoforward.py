import glob
import os
import yaml

path = os.path.dirname(os.path.abspath(__file__))

def purge(dir, pattern):
    #print ( "Deleting forward files in " + dir, flush=True) 
    for p in pattern:
        [os.remove(x) for x in glob.iglob(dir + '/**/' + p, recursive=True)]
   
      
# Clear forward definitions, nocleanup files
pattern = ['forward.txt', 'forward.tmp']
purge( os.path.join(path, "../../../../output/vr"), pattern )
# Clear nocleanup files.
pattern = ['.nocleanup']
purge( os.path.join(path, "../../../../input/vr"), pattern )

# generate forward and nocleanup files
config_folder = os.path.join(path, "../../../../user/default/comfyui_stereoscopic")
yaml_def = os.path.join(config_folder, "autoforward.yaml")
with open(yaml_def) as stream:
    try:
        doc=yaml.safe_load(stream)
        pipeline=doc["pipeline"]
        errors=0
        for stage_in in pipeline:
            sourceStage=stage_in["from"]
            
            try:
                keepinput=stage_in["keepinput"]
                if keepinput:
                    source_done_folder = os.path.join(path, "../../../../input/vr/"+sourceStage+"/done")
                    keepinput_file = os.path.join(source_done_folder, ".nocleanup")
                    with open(keepinput_file, "w") as f:
                            f.write("# Autogenerated - will be reseted on next start of daemon. Edit autoforward.yaml instead.\n")
                #print("\x1b[94m\x1b[1mError:\x1b[0m\x1b[94m keepinput defined for source stage '"+sourceStage+"'\x1b[0m", keepinput)
            except KeyError:
                pass
            #except Exception:
            #    pass
                
            try:
                rules=stage_in["forward"]
            except KeyError as e:
                continue
            if len(rules)>0:
                source_output_folder = os.path.join(path, "../../../../output/vr/"+sourceStage)
                if os.path.exists(source_output_folder):
                    forward_tmp = os.path.join(source_output_folder, "forward.tmp")
                    with open(forward_tmp, "w") as f:
                        f.write("# Autogenerated - will be reseted on next start of daemon. Edit autoforward.yaml instead.\n")
                        f.write("# Rules are executed in order until first condition (including file type) matches.\n")
                        for rule in rules:
                            targetStage=rule["rule"]["to"]
                            target_input_folder = os.path.join(path, "../../../../input/vr/"+targetStage)
                            if os.path.exists(target_input_folder):
                                try:
                                    conditions=rule["rule"]["conditions"]
                                    if len(conditions)>0:
                                        f.write("[")
                                        for c in range(len(conditions)):
                                            condition=conditions[c]
                                            if c>0:
                                                f.write(":")
                                            f.write(condition)
                                        f.write("]")
                                except KeyError as e:
                                    conditions=None
                                f.write(targetStage+"\n")
                            else:
                                print("\x1b[91m\x1b[1mError:\x1b[0m\x1b[91m Invalid forward target stage '"+targetStage+"' defined for source stage '"+sourceStage+"'\x1b[0m")
                                f.write("# Error: "+targetStage+" does not exist. Edit "+os.path.abspath(yaml_def)+"\n")
                                errors+=1
                    forward_final = os.path.join(source_output_folder, "forward.txt")
                    os.rename(forward_tmp, forward_final)
                else:
                    print("\x1b[91m\x1b[1mError:\x1b[0m\x1b[91m Invalid forward source stage '"+sourceStage+"'\x1b[0m")
                    errors+=1
        if errors>0:
            print(str(errors)+" error found! Fix them in "+os.path.abspath(yaml_def))
        exit(errors)
        
    except yaml.YAMLError as exc:
        print(exc)
        

      
